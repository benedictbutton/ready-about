let ApolloServer,gql,buildFederatedSchema,mongoose,userResolver,userSchema;_200‍.x([["default",()=>_200‍.o]]);_200‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_200‍.w("@apollo/federation",[["buildFederatedSchema",["buildFederatedSchema"],function(v){buildFederatedSchema=v}]]);_200‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_200‍.w("../resolvers/user",[["default",["userResolver"],function(v){userResolver=v}]]);_200‍.w("../schema/user",[["default",["userSchema"],function(v){userSchema=v}]]);





const User = require('../models/user');

const user = async () => {
  const server = new ApolloServer({
    schema: buildFederatedSchema([
      { typeDefs: userSchema, resolvers: userResolver },
    ]),
    // context: async ({ req }) => {
    //   return { User };
    // },
  });

  await mongoose.connect(
    'mongodb+srv://bdaly:4J8U-rGwv5r.jQj@cluster0-vof2w.mongodb.net/test?retryWrites=true&w=majority',
    {
      useNewUrlParser: true,
    },
  );

  server.listen(4002).then(({ url }) => {
    console.log(`🚀 Server ready at ${url}`);
  });
};

_200‍.d(user);

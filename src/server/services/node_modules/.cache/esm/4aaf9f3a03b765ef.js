let ApolloServer,gql,buildFederatedSchema,wordResolver,wordSchema;_03b‍.x([["default",()=>_03b‍.o]]);_03b‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_03b‍.w("@apollo/federation",[["buildFederatedSchema",["buildFederatedSchema"],function(v){buildFederatedSchema=v}]]);_03b‍.w("../resolvers/word",[["default",["wordResolver"],function(v){wordResolver=v}]]);_03b‍.w("../schema/word",[["default",["wordSchema"],function(v){wordSchema=v}]]);




const word = () => {
  const server = new ApolloServer({
    schema: buildFederatedSchema([
      { typeDefs: wordSchema, resolvers: wordResolver },
    ]),
  });

  server.listen(4001).then(({ url }) => {
    console.log(`🚀 Server ready at ${url}`);
  });
};

_03b‍.d(word);

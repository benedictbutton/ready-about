_9af‍.x([["default",()=>_9af‍.o]]);const User = require('./models/user');

_9af‍.d({
  Query: {
    users: async (parent, args) => {
      return await User.findAll();
    },
    user: async (parent, { id }) => {
      // console.log(models.User);
      return await User.findById(id);
    },
    me: async (parent, args) => {
      if (!me) return null;
      return await User.findById(me.id);
    },
  },
  Mutation: {
    editUser: async (
      parent,
      { id, editProp, edit },
      { dataSources },
    ) => {
      try {
        let { edit, editProp } = req.body.user;
        if (editProp === 'phoneNumber')
          edit = formatPhoneNumber(edit);
        const user = await dataSources.UserModel.findOneAndUpdate(
          { username: req.me.username },
          { [editProp]: edit },
          { upsert: true, new: true },
        );
        return {
          user,
          editField: editProp,
          edit,
        };
      } catch (err) {
        res.status(err.statusCode || 502).json(err.error || err);
      }
    },
    // deleteUser: combineResolvers(
    //   isAdmin,
    //   async (parent, { id }, { models }) => {
    //     return await models.User.destroy({
    //       where: { id },
    //     });
    //   },
    // ),
  },
  User: {
    words: async (user, args) => {
      return await models.Word.findAll({
        where: {
          userId: user.id,
        },
      });
    },
  },
});

// signIn: async (
//       parent,
//       { login, password },
//       { models, secret },
//     ) => {
//       const user = await models.User.findByLogin(login);
//
//       if (!user) {
//         throw new UserInputError('No user found.');
//       }
//
//       const isValid = await user.validatePassword(password);
//
//       if (!isValid) {
//         throw new AuthenticationError('Invalid password.');
//       }
//       return { token: createToken(user, secret, '30m') };
//     },
